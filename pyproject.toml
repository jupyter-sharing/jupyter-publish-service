[build-system]
requires = ["hatchling >=1.0"]
build-backend = "hatchling.build"

[project]
name = "jupyter_publishing_service"
version = "0.0.1.dev0"
readme = "README.md"
license = { file = "COPYING.md" }
description = "A (backend agnostic) service for publishing sharable Jupyter content."
authors = [{name = "Jupyter Development Team", email = "jupyter@googlegroups.com"}]
keywords = ["ipython", "jupyter"]
classifiers = [
    "Framework :: Jupyter",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]
requires-python = ">=3.7"
dependencies = [
    "jupyter_core",
    "fastapi",
    "uvicorn",
    "pydantic",
    "traitlets",
    "sqlmodel",
    "aiosqlite",
    "jwcrypto",
    "httpx"
]

[project.optional-dependencies]
test = [
    "pytest>=6.0",
]

[project.scripts]
jupyter-publishing = "jupyter_publishing_service.app:main"


[tool.hatch.build.hooks.jupyter-builder]
dependencies = ["hatch-jupyter-builder>=0.3.3"]
install-pre-commit-hook = true

[tool.black]
line_length = 100

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
addopts = "-raXs --durations 10 --color=yes --doctest-modules"
testpaths = [
    "tests/"
]
timeout = 300
# Restore this setting to debug failures
# timeout_method = "thread"
filterwarnings = [
  "error",
  "module:make_current is deprecated:DeprecationWarning",
  "module:clear_current is deprecated:DeprecationWarning",
  "module:There is no current event loop:DeprecationWarning",
  "ignore:Passing a schema to Validator.iter_errors:DeprecationWarning",
  "ignore:unclosed <socket.socket:ResourceWarning",
  "ignore:unclosed event loop:ResourceWarning",
  "ignore:run_pre_save_hook is deprecated:DeprecationWarning"
]

[tool.tbump.version]
current = "0.0.1.dev0"
regex = '''
  (?P<major>\d+)\.(?P<minor>\d+)\.(?P<patch>\d+)
  ((?P<channel>a|b|rc|.dev)(?P<release>\d+))?
'''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

[[tool.tbump.file]]
src = "jupyter_server/_version.py"
version_template = '({major}, {minor}, {patch}, "{channel}", "{release}")'

[[tool.tbump.file]]
src = "pyproject.toml"
version_template = "version = \"{major}.{minor}.{patch}{channel}{release}\""

[[tool.tbump.field]]
name = "channel"
default = ""

[[tool.tbump.field]]
name = "release"
default = ""

[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
pretty = true
show_error_context = true
show_error_codes = true
strict_equality = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
explicit_package_bases = true
namespace_packages = true
